// Code generated by rclgo-gen. DO NOT EDIT.

package elevator_msgs_msg
import (
	"unsafe"

	"github.com/PolibaX/rclgo/pkg/rclgo"
	"github.com/PolibaX/rclgo/pkg/rclgo/types"
	"github.com/PolibaX/rclgo/pkg/rclgo/typemap"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <elevator_msgs/msg/elevator_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("elevator_msgs/ElevatorStatus", ElevatorStatusTypeSupport)
	typemap.RegisterMessage("elevator_msgs/msg/ElevatorStatus", ElevatorStatusTypeSupport)
}

type ElevatorStatus struct {
	CurrentFloor uint8 `yaml:"current_floor"`
	GoingUp bool `yaml:"going_up"`
	GoingDown bool `yaml:"going_down"`
}

// NewElevatorStatus creates a new ElevatorStatus with default values.
func NewElevatorStatus() *ElevatorStatus {
	self := ElevatorStatus{}
	self.SetDefaults()
	return &self
}

func (t *ElevatorStatus) Clone() *ElevatorStatus {
	c := &ElevatorStatus{}
	c.CurrentFloor = t.CurrentFloor
	c.GoingUp = t.GoingUp
	c.GoingDown = t.GoingDown
	return c
}

func (t *ElevatorStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ElevatorStatus) SetDefaults() {
	t.CurrentFloor = 0
	t.GoingUp = false
	t.GoingDown = false
}

func (t *ElevatorStatus) GetTypeSupport() types.MessageTypeSupport {
	return ElevatorStatusTypeSupport
}

// ElevatorStatusPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ElevatorStatusPublisher struct {
	*rclgo.Publisher
}

// NewElevatorStatusPublisher creates and returns a new publisher for the
// ElevatorStatus
func NewElevatorStatusPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ElevatorStatusPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ElevatorStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ElevatorStatusPublisher{pub}, nil
}

func (p *ElevatorStatusPublisher) Publish(msg *ElevatorStatus) error {
	return p.Publisher.Publish(msg)
}

// ElevatorStatusSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ElevatorStatusSubscription struct {
	*rclgo.Subscription
}

// ElevatorStatusSubscriptionCallback type is used to provide a subscription
// handler function for a ElevatorStatusSubscription.
type ElevatorStatusSubscriptionCallback func(msg *ElevatorStatus, info *rclgo.MessageInfo, err error)

// NewElevatorStatusSubscription creates and returns a new subscription for the
// ElevatorStatus
func NewElevatorStatusSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ElevatorStatusSubscriptionCallback) (*ElevatorStatusSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ElevatorStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ElevatorStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ElevatorStatusSubscription{sub}, nil
}

func (s *ElevatorStatusSubscription) TakeMessage(out *ElevatorStatus) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneElevatorStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneElevatorStatusSlice(dst, src []ElevatorStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ElevatorStatusTypeSupport types.MessageTypeSupport = _ElevatorStatusTypeSupport{}

type _ElevatorStatusTypeSupport struct{}

func (t _ElevatorStatusTypeSupport) New() types.Message {
	return NewElevatorStatus()
}

func (t _ElevatorStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.elevator_msgs__msg__ElevatorStatus
	return (unsafe.Pointer)(C.elevator_msgs__msg__ElevatorStatus__create())
}

func (t _ElevatorStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.elevator_msgs__msg__ElevatorStatus__destroy((*C.elevator_msgs__msg__ElevatorStatus)(pointer_to_free))
}

func (t _ElevatorStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ElevatorStatus)
	mem := (*C.elevator_msgs__msg__ElevatorStatus)(dst)
	mem.current_floor = C.uint8_t(m.CurrentFloor)
	mem.going_up = C.bool(m.GoingUp)
	mem.going_down = C.bool(m.GoingDown)
}

func (t _ElevatorStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ElevatorStatus)
	mem := (*C.elevator_msgs__msg__ElevatorStatus)(ros2_message_buffer)
	m.CurrentFloor = uint8(mem.current_floor)
	m.GoingUp = bool(mem.going_up)
	m.GoingDown = bool(mem.going_down)
}

func (t _ElevatorStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__elevator_msgs__msg__ElevatorStatus())
}

type CElevatorStatus = C.elevator_msgs__msg__ElevatorStatus
type CElevatorStatus__Sequence = C.elevator_msgs__msg__ElevatorStatus__Sequence

func ElevatorStatus__Sequence_to_Go(goSlice *[]ElevatorStatus, cSlice CElevatorStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ElevatorStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ElevatorStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ElevatorStatus__Sequence_to_C(cSlice *CElevatorStatus__Sequence, goSlice []ElevatorStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.elevator_msgs__msg__ElevatorStatus)(C.malloc(C.sizeof_struct_elevator_msgs__msg__ElevatorStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ElevatorStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ElevatorStatus__Array_to_Go(goSlice []ElevatorStatus, cSlice []CElevatorStatus) {
	for i := 0; i < len(cSlice); i++ {
		ElevatorStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ElevatorStatus__Array_to_C(cSlice []CElevatorStatus, goSlice []ElevatorStatus) {
	for i := 0; i < len(goSlice); i++ {
		ElevatorStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
