// Code generated by rclgo-gen. DO NOT EDIT.

package elevator_msgs_msg
import (
	"unsafe"

	"github.com/PolibaX/rclgo/pkg/rclgo"
	"github.com/PolibaX/rclgo/pkg/rclgo/types"
	"github.com/PolibaX/rclgo/pkg/rclgo/typemap"
	primitives "github.com/PolibaX/rclgo/pkg/rclgo/primitives"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <elevator_msgs/msg/hello.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("elevator_msgs/Hello", HelloTypeSupport)
	typemap.RegisterMessage("elevator_msgs/msg/Hello", HelloTypeSupport)
}

type Hello struct {
	Name string `yaml:"name"`
}

// NewHello creates a new Hello with default values.
func NewHello() *Hello {
	self := Hello{}
	self.SetDefaults()
	return &self
}

func (t *Hello) Clone() *Hello {
	c := &Hello{}
	c.Name = t.Name
	return c
}

func (t *Hello) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Hello) SetDefaults() {
	t.Name = ""
}

func (t *Hello) GetTypeSupport() types.MessageTypeSupport {
	return HelloTypeSupport
}

// HelloPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type HelloPublisher struct {
	*rclgo.Publisher
}

// NewHelloPublisher creates and returns a new publisher for the
// Hello
func NewHelloPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*HelloPublisher, error) {
	pub, err := node.NewPublisher(topic_name, HelloTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &HelloPublisher{pub}, nil
}

func (p *HelloPublisher) Publish(msg *Hello) error {
	return p.Publisher.Publish(msg)
}

// HelloSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type HelloSubscription struct {
	*rclgo.Subscription
}

// HelloSubscriptionCallback type is used to provide a subscription
// handler function for a HelloSubscription.
type HelloSubscriptionCallback func(msg *Hello, info *rclgo.MessageInfo, err error)

// NewHelloSubscription creates and returns a new subscription for the
// Hello
func NewHelloSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback HelloSubscriptionCallback) (*HelloSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg Hello
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, HelloTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &HelloSubscription{sub}, nil
}

func (s *HelloSubscription) TakeMessage(out *Hello) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneHelloSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneHelloSlice(dst, src []Hello) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var HelloTypeSupport types.MessageTypeSupport = _HelloTypeSupport{}

type _HelloTypeSupport struct{}

func (t _HelloTypeSupport) New() types.Message {
	return NewHello()
}

func (t _HelloTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.elevator_msgs__msg__Hello
	return (unsafe.Pointer)(C.elevator_msgs__msg__Hello__create())
}

func (t _HelloTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.elevator_msgs__msg__Hello__destroy((*C.elevator_msgs__msg__Hello)(pointer_to_free))
}

func (t _HelloTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Hello)
	mem := (*C.elevator_msgs__msg__Hello)(dst)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.name), m.Name)
}

func (t _HelloTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Hello)
	mem := (*C.elevator_msgs__msg__Hello)(ros2_message_buffer)
	primitives.StringAsGoStruct(&m.Name, unsafe.Pointer(&mem.name))
}

func (t _HelloTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__elevator_msgs__msg__Hello())
}

type CHello = C.elevator_msgs__msg__Hello
type CHello__Sequence = C.elevator_msgs__msg__Hello__Sequence

func Hello__Sequence_to_Go(goSlice *[]Hello, cSlice CHello__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Hello, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		HelloTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func Hello__Sequence_to_C(cSlice *CHello__Sequence, goSlice []Hello) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.elevator_msgs__msg__Hello)(C.malloc(C.sizeof_struct_elevator_msgs__msg__Hello * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		HelloTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func Hello__Array_to_Go(goSlice []Hello, cSlice []CHello) {
	for i := 0; i < len(cSlice); i++ {
		HelloTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Hello__Array_to_C(cSlice []CHello, goSlice []Hello) {
	for i := 0; i < len(goSlice); i++ {
		HelloTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
